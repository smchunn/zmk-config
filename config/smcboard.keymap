/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "keypos.h"
#include "zmk_utils.h"

#define ALL 0xff
#define BASE 0
#define SYM  1
#define NAV  2
#define FN   3

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMBS LH1 LH0 RH0 RH1

#define COMBO_QT global-quick-tap-ms = <150>;
#define COMBO_FAST 20
#define COMBO_SLOW 35

/*                              34 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────┬────────────────────╮ ╭─────────────────────┬─────────────────────╮
  │  0   1   2   3   4 │  5   6   7   8   9 │ │ LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
  │ 10  11  12  13  14 │ 15  16  17  18  19 │ │ LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 │
  │ 20  21  22  23  24 │ 25  26  27  28  29 │ │ LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 │
  ╰───────────╮ 30  31 │ 32  33 ╭───────────╯ ╰───────────╮ LH1 LH0 │ RH0 RH1 ╭───────────╯
              ╰────────┴────────╯                         ╰─────────┴─────────╯             */



&mt {
	flavor = "tap-preferred";
	tapping_term_ms = <230>;
};

/ { 

	behaviors {
		hml: hml {
			compatible = "zmk,behavior-hold-tap";
			label = "HML";
			#binding-cells = <2>;
			tapping-term-ms = <280>;
			quick_tap_ms = <175>;
    	global-quick-tap-ms = <150>;
			flavor = "balanced";
			bindings = <&kp>, <&kp>;
	    hold-trigger-key-positions = <KEYS_R THUMBS>;
	    hold-trigger-on-release;  
		};
		hmr: hmr {
			compatible = "zmk,behavior-hold-tap";
			label = "HMR";
			#binding-cells = <2>;
			tapping-term-ms = <280>;
			quick_tap_ms = <175>;
    	global-quick-tap-ms = <150>;
			flavor = "balanced";
			bindings = <&kp>, <&kp>;
	    hold-trigger-key-positions = <KEYS_L THUMBS>;
	    hold-trigger-on-release;  
		};
		td: tapdance {
			compatible = "zmk,behavior-hold-tap";
			label = "TAPDANCE";
			#binding-cells = <2>;
			tapping-term-ms = <150>;
			quick_tap_ms = <0>;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
		};
		llt: llt {
			compatible = "zmk,behavior-hold-tap";
			label = "LLT";
			#binding-cells = <2>;
			tapping-term-ms = <150>;
			quick_tap_ms = <0>;
			flavor = "tap-preferred";
			retro-tap;
			bindings = <&mo>, <&to>;
		};
		// tap: comma | shift + tap: semicolon
		MOD_MORPH(COMMA, (<&kp COMMA>, <&kp SEMI>), (<(MOD_LSFT|MOD_RSFT)>))

		// tap: dot | shift + tap: colon
		MOD_MORPH(DOT, (<&kp DOT>, <&kp COLON>), (<(MOD_LSFT|MOD_RSFT)>))

		// tap: ( | shift + tap: <
		MOD_MORPH(LPAR, (<&kp LPAR>, <&kp LT>), (<(MOD_LSFT|MOD_RSFT)>))
		// tap: ) | shift + tap: >
		MOD_MORPH(RPAR, (<&kp RPAR>, <&kp GT>), (<(MOD_LSFT|MOD_RSFT)>))

		// tap: { | shift + tap: [
		MOD_MORPH(LBRC, (<&kp LBRC>, <&kp LBKT>), (<(MOD_LSFT|MOD_RSFT)>))
		// tap: } | shift + tap: ]
		MOD_MORPH(RBRC, (<&kp RBRC>, <&kp RBKT>), (<(MOD_LSFT|MOD_RSFT)>))

		// tap: ~ | shift + tap: `
		MOD_MORPH(TILDE, (<&kp TILDE>, <&kp GRAVE>), (<(MOD_LSFT|MOD_RSFT)>))

		// tap: / | shift + tap: backslash
		MOD_MORPH(SLASH, (<&kp FSLH>, <&kp BSLH>), (<(MOD_LSFT|MOD_RSFT)>))

	};

  combos {
    compatible = "zmk,combos";
    COMBO(TAB, &hml LA(LCTRL) TAB, LM2 LM3, ALL, COMBO_FAST)
    COMBO(RESC, &hmr RA(RCTRL) ESC, RM1 RM2, ALL, COMBO_FAST)
    COMBO(LESC, &hml LA(LCTRL) ESC, LM1 LM2, ALL, COMBO_FAST)
  };

	keymap {
	  compatible = "zmk,keymap";
				
		default_layer {
			bindings = <
  			&kp Q &kp W &kp F &kp P &kp B &kp J &kp L &kp U &kp Y &kp SQT
				&hml LSHIFT A &hml LALT R &hml LCTRL S &hml LGUI T &kp G &kp M &hmr RGUI N &hmr RCTRL E &hmr RALT I &hmr RSHIFT O
				&kp Z &kp X &kp C &kp D &kp V &kp K &kp H &mm_COMMA &mm_DOT &mm_SLASH
				&mt LC(LS(LALT)) SPC &kp LSHIFT &llt NAV BASE &mo SYM
			>;
		};

		symbol_layer {
			bindings = <
        &kp QMARK &kp AT &kp HASH &kp DOLLAR &none &kp PIPE &kp PERCENT &kp ASTERISK &kp CARET &kp AMPERSAND
        &hml LSHFT N1 &hml LALT N2 &hml LCTRL N3 &hml LGUI N4 &kp N5 &kp N6 &hmr RGUI N7 &hmr RCTRL N8 &hmr RALT N9 &hmr RSHFT N0
        &kp PLUS &kp EQUAL &mm_LBRC &mm_RBRC &mm_TILDE &kp EXCL &mm_LPAR &mm_RPAR &kp MINUS &kp UNDER
        &trans &trans &trans &trans
        >;
		};
		
		nav_layer {
			bindings = <
				&kp ESC &none &none &none &none &none &kp ESC &kp TAB &kp DEL &kp BSPC
				&kp LSHFT &kp LALT &kp LCTRL &kp LGUI &none &kp LEFT &kp UP &kp DOWN &kp RIGHT &kp ENTER
				&to FN &none &none &none &none &kp HOME &kp PG_UP &kp PG_DN &kp END &none
				&trans &trans &trans &none
			>;
		};
		
		function_layer {
			bindings = <
				&none &kp C_VOL_DN &kp C_VOL_UP &kp F11 &none &none &kp F12 &kp C_BRI_DN &kp C_BRI_UP &none
				&hml LSHFT F1 &hml LALT F2 &hml LCTRL F3 &hml LGUI F4 &kp F5 &kp F6 &hmr RGUI F7 &hmr RCTRL F8 &hmr RALT F9 &hmr RSHFT F10
				&none &none &bt BT_PRV &bt BT_NXT &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &none &none
				&trans &trans &trans &trans
			>;
		};
		
	};
};

